{"version":3,"sources":["assets\\Script\\Roles\\Player.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Player extends cc.Component {\r\n    @property(cc.Label)\r\n    nameLabel: cc.Label = null;\r\n    @property(cc.Label)\r\n    massLabel: cc.Label = null;\r\n    @property\r\n    raduis: number = 10;\r\n    @property\r\n    velocity: cc.Vec2 = new cc.Vec2(20, 20);\r\n    mass: number;\r\n    colorType: number;\r\n    // 限速因子\r\n    speedLimitFator: number = 2.5;\r\n    // 记录最大重量\r\n    maxMass: number = 0;\r\n\r\n    onLoad() {\r\n        let nickName: string = cc.sys.localStorage.getItem(\"nickName\");\r\n        this.nameLabel.string = nickName;\r\n        this.calculateProperty(this.raduis, 1);\r\n        this.velocity = cc.v2((Math.random()-0.5)*20, (Math.random()-0.5)*20);\r\n        // this.node.color = new cc.Color(255*Math.random(), 255*Math.random(), 255*Math.random());\r\n    }\r\n\r\n    calculateProperty(raduis: number, colorType: number) {\r\n        this.speedLimitFator = this.speedLimitFator <= 1 ? 1 : this.speedLimitFator - 1 / this.raduis\r\n        this.raduis = raduis;\r\n        this.nameLabel.node.y = raduis + 15;\r\n        this.colorType = colorType;\r\n        this.setSpriteFrame();\r\n        this.mass = raduis * raduis;\r\n        if (this.mass > this.maxMass) this.maxMass = this.mass;\r\n        this.massLabel.string = Math.round(this.mass).toString() + \" kg\"\r\n        this.node.width = raduis * 2;\r\n        this.node.height = raduis * 2;\r\n        // 设置碰撞检测器的半径\r\n        this.node.getComponent(cc.CircleCollider).radius = raduis;\r\n    }\r\n\r\n    setSpriteFrame() {\r\n        let sprite = this.node.getComponent(cc.Sprite);\r\n        let fn = 'players/player'+ this.colorType.toString()\r\n        cc.log(this.colorType);\r\n        cc.resources.load(fn,  (err, res) => {\r\n            if(err) return;\r\n            if(!(res instanceof cc.Texture2D)) return;\r\n            sprite.spriteFrame = new cc.SpriteFrame(res);\r\n        })\r\n    }\r\n\r\n    update (dt) {\r\n        this.node.x += this.velocity.x * dt;\r\n        this.node.y += this.velocity.y * dt;\r\n    }\r\n}\r\n"]}