{"version":3,"sources":["assets\\Script\\Api\\RankApi.ts"],"names":[],"mappings":";;;;;;AAAA,oCAA+B;AAC/B,2CAA0C;AAO1C;IAAA;IAkDA,CAAC;IA/CiB,oBAAY,GAA1B,UAA2B,GAAW,EAAE,EAAkB;QACtD,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QACxC,EAAE,CAAC,OAAO,CAAC;YACP,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,UAAC,GAAW;gBACjB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClB,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;oBACvB,IAAI,IAAI,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACjE,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;iBACtB;qBAAM;oBACH,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;YACL,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAEa,gBAAQ,GAAtB,UAAuB,EAAkB;QACrC,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;QACvB,EAAE,CAAC,OAAO,CAAC;YACP,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,UAAC,GAAW;gBACjB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClB,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAkB,GAAG,CAAC,MAAM,CAAC,CAAC;oBACtC,IAAI,KAAK,GAAkB,EAAE,CAAC;oBAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAClC,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,IAAI,IAAI,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACjE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACpB;oBAED,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACrB;qBAAM;oBACH,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;YACL,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAhDc,eAAO,GAAW,gBAAM,CAAC,OAAO,GAAG,mBAAmB,CAAC;IAiD1E,cAAC;CAlDD,AAkDC,IAAA;kBAlDoB,OAAO","file":"","sourceRoot":"/","sourcesContent":["import Config from '../Config';\r\nimport { BBRank } from '../Models/Models';\r\n\r\ninterface RecordCallBack {\r\n    success(ranks: BBRank[]): void;\r\n    fail(err: string): void;\r\n}\r\n\r\nexport default class RankApi {\r\n    private static baseUrl: string = Config.BaseURL + \"/api/record/rank/\";\r\n\r\n    public static GetUserOrder(uid: number, cb: RecordCallBack) {\r\n        let url = this.baseUrl + uid.toString();\r\n        wx.request({\r\n            url: url,\r\n            method: \"GET\",\r\n            success: (res: Object) => {\r\n                res = res[\"data\"];\r\n                if (res[\"IsSuccess\"]) {\r\n                    let data = res[\"Data\"];\r\n                    let rank = new BBRank(data[\"Seq\"], data[\"Name\"], data[\"Weight\"]);\r\n                    cb.success([rank]);\r\n                } else {\r\n                    cb.fail(res[\"Info\"][\"Message\"]);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                cb.fail(err.errMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static GetRanks(cb: RecordCallBack) {\r\n        let url = this.baseUrl;\r\n        wx.request({\r\n            url: url,\r\n            method: \"GET\",\r\n            success: (res: Object) => {\r\n                res = res[\"data\"];\r\n                if (res[\"IsSuccess\"]) {\r\n                    let data: Array<Object> = res[\"Data\"];\r\n                    let ranks: Array<BBRank> = [];\r\n                    for (let i = 0; i < data.length; i++) {\r\n                        const item = data[i];\r\n                        let rank = new BBRank(item[\"Seq\"], item[\"Name\"], item[\"Weight\"]);\r\n                        ranks.push(rank);\r\n                    }\r\n                    \r\n                    cb.success(ranks);\r\n                } else {\r\n                    cb.fail(res[\"Info\"][\"Message\"]);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                cb.fail(err.errMsg);\r\n            }\r\n        });\r\n    }\r\n}"]}