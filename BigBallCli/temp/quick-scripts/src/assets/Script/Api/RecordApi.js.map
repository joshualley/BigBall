{"version":3,"sources":["assets\\Script\\Api\\RecordApi.ts"],"names":[],"mappings":";;;;;;AAAA,oCAA+B;AAC/B,2CAA4C;AAO5C;IAAA;IAsHA,CAAC;IAnHiB,aAAG,GAAjB,UAAkB,GAAW,EAAE,MAAc,EAAE,OAAe,EAAE,EAAkB;QAC9E,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;QACvB,EAAE,CAAC,OAAO,CAAC;YACP,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,MAAM;YACd,IAAI,EAAE;gBACF,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,MAAM;gBAChB,SAAS,EAAE,OAAO;aACrB;YACD,OAAO,EAAE,UAAC,GAAW;gBACjB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClB,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;oBACvB,IAAI,MAAM,GAAG,IAAI,iBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpF,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACtB;qBAAM;oBACH,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;YACL,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAEa,gBAAM,GAApB,UAAqB,EAAU,EAAE,GAAW,EAAE,MAAc,EAAE,OAAe,EAAG,EAAkB;QAC9F,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;QACvB,EAAE,CAAC,OAAO,CAAC;YACP,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,MAAM;YACd,IAAI,EAAE;gBACF,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBAC5B,SAAS,EAAE,OAAO;aACrB;YACD,OAAO,EAAE,UAAC,GAAW;gBACjB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClB,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;oBACvB,IAAI,MAAM,GAAG,IAAI,iBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpF,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACtB;qBAAM;oBACH,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;YACL,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAEa,aAAG,GAAjB,UAAkB,EAAU,EAAE,EAAkB;QAC5C,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QACvC,EAAE,CAAC,OAAO,CAAC;YACP,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,UAAC,GAAW;gBACjB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClB,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;oBACvB,IAAI,MAAM,GAAG,IAAI,iBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpF,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACtB;qBAAM;oBACH,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;YACL,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAEa,kBAAQ,GAAtB,UAAuB,GAAW,EAAE,EAAkB;QAClD,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAClD,EAAE,CAAC,OAAO,CAAC;YACP,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,UAAC,GAAW;gBACjB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClB,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;oBACvB,IAAI,MAAM,GAAG,IAAI,iBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpF,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACtB;qBAAM;oBACH,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;YACL,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAEa,gBAAM,GAApB,UAAqB,EAAU,EAAE,EAAkB;QAC/C,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QACvC,EAAE,CAAC,OAAO,CAAC;YACP,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE,UAAC,GAAW;gBACjB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClB,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;oBACvB,IAAI,MAAM,GAAG,IAAI,iBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpF,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACtB;qBAAM;oBACH,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;YACL,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IApHc,iBAAO,GAAW,gBAAM,CAAC,OAAO,GAAG,cAAc,CAAC;IAqHrE,gBAAC;CAtHD,AAsHC,IAAA;kBAtHoB,SAAS","file":"","sourceRoot":"/","sourcesContent":["import Config from '../Config';\r\nimport { BBRecord } from '../Models/Models';\r\n\r\ninterface RecordCallBack {\r\n    success(record: BBRecord): void;\r\n    fail(err: string): void;\r\n}\r\n\r\nexport default class RecordApi {\r\n    private static baseUrl: string = Config.BaseURL + \"/api/record/\";\r\n\r\n    public static Add(uid: number, weight: number, maxTime: number, cb: RecordCallBack) {\r\n        let url = this.baseUrl;\r\n        wx.request({\r\n            url: url,\r\n            method: \"POST\",\r\n            data: {\r\n                \"UID\": uid,\r\n                \"Weight\": weight,\r\n                \"MaxTime\": maxTime\r\n            },\r\n            success: (res: Object) => {\r\n                res = res[\"data\"];\r\n                if (res[\"IsSuccess\"]) {\r\n                    let data = res[\"Data\"];\r\n                    let record = new BBRecord(data[\"ID\"], data[\"UID\"], data[\"Weight\"], data[\"MaxTime\"]);\r\n                    cb.success(record);\r\n                } else {\r\n                    cb.fail(res[\"Info\"][\"Message\"]);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                cb.fail(err.errMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static Update(id: number, uid: number, weight: number, maxTime: number,  cb: RecordCallBack) {\r\n        let url = this.baseUrl;\r\n        wx.request({\r\n            url: url,\r\n            method: \"POST\",\r\n            data: {\r\n                \"ID\": id,\r\n                \"UID\": uid,\r\n                \"Weight\": Math.round(weight),\r\n                \"MaxTime\": maxTime\r\n            },\r\n            success: (res: Object) => {\r\n                res = res[\"data\"];\r\n                if (res[\"IsSuccess\"]) {\r\n                    let data = res[\"Data\"];\r\n                    let record = new BBRecord(data[\"ID\"], data[\"UID\"], data[\"Weight\"], data[\"MaxTime\"]);\r\n                    cb.success(record);\r\n                } else {\r\n                    cb.fail(res[\"Info\"][\"Message\"]);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                cb.fail(err.errMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static Get(id: number, cb: RecordCallBack) {\r\n        let url = this.baseUrl + id.toString();\r\n        wx.request({\r\n            url: url,\r\n            method: \"GET\",\r\n            success: (res: Object) => {\r\n                res = res[\"data\"];\r\n                if (res[\"IsSuccess\"]) {\r\n                    let data = res[\"Data\"];\r\n                    let record = new BBRecord(data[\"ID\"], data[\"UID\"], data[\"Weight\"], data[\"MaxTime\"]);\r\n                    cb.success(record);\r\n                } else {\r\n                    cb.fail(res[\"Info\"][\"Message\"]);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                cb.fail(err.errMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static GetByUId(uid: number, cb: RecordCallBack) {\r\n        let url = this.baseUrl + \"/uid/\" + uid.toString();\r\n        wx.request({\r\n            url: url,\r\n            method: \"GET\",\r\n            success: (res: Object) => {\r\n                res = res[\"data\"];\r\n                if (res[\"IsSuccess\"]) {\r\n                    let data = res[\"Data\"];\r\n                    let record = new BBRecord(data[\"ID\"], data[\"UID\"], data[\"Weight\"], data[\"MaxTime\"]);\r\n                    cb.success(record);\r\n                } else {\r\n                    cb.fail(res[\"Info\"][\"Message\"]);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                cb.fail(err.errMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static Delete(id: number, cb: RecordCallBack) {\r\n        let url = this.baseUrl + id.toString();\r\n        wx.request({\r\n            url: url,\r\n            method: \"DELETE\",\r\n            success: (res: Object) => {\r\n                res = res[\"data\"];\r\n                if (res[\"IsSuccess\"]) {\r\n                    let data = res[\"Data\"];\r\n                    let record = new BBRecord(data[\"ID\"], data[\"UID\"], data[\"Weight\"], data[\"MaxTime\"]);\r\n                    cb.success(record);\r\n                } else {\r\n                    cb.fail(res[\"Info\"][\"Message\"]);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                cb.fail(err.errMsg);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n"]}