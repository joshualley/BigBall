{"version":3,"sources":["assets\\Script\\Managers\\CollisionManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sCAAgC;AAChC,0CAAoC;AACpC,6CAAuC;AACvC,8CAAyC;AACzC,wCAAmC;AAE7B,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAE1C,IAAK,eAIJ;AAJD,WAAK,eAAe;IAChB,qDAAQ,CAAA;IACR,yDAAU,CAAA;IACV,qDAAQ,CAAA;AACZ,CAAC,EAJI,eAAe,KAAf,eAAe,QAInB;AAGD;IAA8C,oCAAY;IAA1D;QAAA,qEA8EC;QA3EG,iBAAW,GAAY,IAAI,CAAC;;IA2EhC,CAAC;IAzEG,mCAAQ,GAAR;QACI,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;IACrD,CAAC;IAED,oCAAS,GAAT;QACI,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,KAAK,CAAC;IACtD,CAAC;IAED,mCAAQ,GAAR,UAAS,CAAS;QACd,UAAU;QACV,IAAI,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;YAAE,GAAG,GAAG,CAAC,CAAC;QAC1D,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,qBAAW,CAAC,CAAC,UAAU,CAAC;QACvE,mBAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;YACpB,OAAO,EAAE,UAAC,MAAM;gBACZ,IAAI,CAAC,GAAW,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;gBACtE,IAAI,CAAC,GAAW,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;gBAC1E,mBAAS,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;oBACnC,OAAO,EAAE,UAAC,MAAM,IAAM,CAAC;oBACvB,IAAI,EAAE,UAAC,GAAG;wBACN,eAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;iBACJ,CAAC,CAAA;YACN,CAAC;YACD,IAAI,EAAE,UAAC,GAAG;gBACN,mBAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE;oBACtC,OAAO,EAAE,UAAC,MAAM,IAAM,CAAC;oBACvB,IAAI,EAAE,UAAC,GAAG;wBACN,eAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;iBACJ,CAAC,CAAA;YACN,CAAC;SACJ,CAAC,CAAA;QACF,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,2CAAgB,GAAhB,UAAiB,KAAqB,EAAE,IAAoB;QACxD,+EAA+E;QAC/E,4CAA4C;QAC5C,6CAA6C;QAC7C,qDAAqD;QACrD,uFAAuF;QAEvF,UAAU;QACV,IAAG,IAAI,CAAC,GAAG,IAAI,eAAe,CAAC,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE;YACxE,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAM,CAAC,CAAC;YACvC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,cAAI,CAAC,CAAC;YAEtC,IAAI,OAAO,GAAG,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,CAAC;YACzC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;gBACtC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACjB,OAAO;aACV;YACD,IAAI,SAAS,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;YACrE,YAAY;YACZ,CAAC,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;YAC5C,OAAO;YACP,IAAI,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,qBAAW,CAAC,CAAC,OAAO,EAAE,CAAC;SACxD;aAAM,IAAG,IAAI,CAAC,GAAG,IAAI,eAAe,CAAC,IAAI,IAAI,KAAK,CAAC,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE;YAC7E,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,cAAI,CAAC,CAAC;YACrC,CAAC,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACpD;QACD,qFAAqF;QACjF,0CAA0C;QAC1C,6BAA6B;QAC7B,0BAA0B;QAC1B,qBAAqB;QACrB,6BAA6B;QAC7B,YAAY;QAChB,IAAI;IACR,CAAC;IA1ED;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;yDACU;IAHX,gBAAgB;QADpC,OAAO;OACa,gBAAgB,CA8EpC;IAAD,uBAAC;CA9ED,AA8EC,CA9E6C,EAAE,CAAC,SAAS,GA8EzD;kBA9EoB,gBAAgB","file":"","sourceRoot":"/","sourcesContent":["import Ball from '../Roles/Ball'\r\nimport Player from '../Roles/Player'\r\nimport GameManager from './GameManager'\r\nimport RecordApi from '../Api/RecordApi';\r\nimport Utils from '../Utils/Utils';\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nenum BoxColliderType {\r\n    Ball = 0,\r\n    Player = 1,\r\n    Wall = 2\r\n}\r\n\r\n@ccclass\r\nexport default class CollisionManager extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    gameManager: cc.Node = null;\r\n    \r\n    onEnable() {\r\n        cc.director.getCollisionManager().enabled = true;\r\n    }\r\n\r\n    onDisable() {\r\n        cc.director.getCollisionManager().enabled = false;\r\n    }\r\n\r\n    gameOver(s: Player) {\r\n        // 更新用户的记录\r\n        let uid = cc.sys.localStorage.getItem(\"uid\");\r\n        if (uid == undefined || uid == null || uid == \"\") uid = 0;\r\n        let maxSeconds = this.gameManager.getComponent(GameManager).maxSeconds;\r\n        RecordApi.GetByUId(uid, {\r\n            success: (record) => {\r\n                let w: number = record.weight < s.maxMass ? s.maxMass : record.weight;\r\n                let t: number = record.maxTime < maxSeconds ? maxSeconds : record.maxTime;\r\n                RecordApi.Update(record.id, uid, w, t, {\r\n                    success: (record) => {},\r\n                    fail: (err) => {\r\n                        Utils.ShowError(\"刷新记录失败\");\r\n                    }\r\n                })\r\n            },\r\n            fail: (err) => {\r\n                RecordApi.Add(uid, s.maxMass, maxSeconds, {\r\n                    success: (record) => {},\r\n                    fail: (err) => {\r\n                        Utils.ShowError(\"保存记录失败\");\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        cc.director.loadScene(\"RankSence\", null);\r\n    }\r\n\r\n    onCollisionEnter(other: cc.BoxCollider, self: cc.BoxCollider) {\r\n        // if (self.tag == BoxColliderType.Ball && other.tag == BoxColliderType.Ball) {\r\n        //     let s = self.node.getComponent(Ball);\r\n        //     let o = other.node.getComponent(Ball);\r\n        //     s.velocity = cc.v2(o.velocity.y, o.velocity.x)\r\n        // } else if(self.tag == BoxColliderType.Ball && other.tag == BoxColliderType.Player) {\r\n            \r\n        // } else \r\n        if(self.tag == BoxColliderType.Player && other.tag == BoxColliderType.Ball) {\r\n            let s = self.node.getComponent(Player);\r\n            let o = other.node.getComponent(Ball);\r\n\r\n            let similar = s.colorType == o.colorType;\r\n            if (!similar && s.raduis - o.raduis <= 3) {\r\n                this.gameOver(s);\r\n                return;\r\n            }\r\n            let newRadius = !similar ? s.raduis - o.raduis : s.raduis + o.raduis;\r\n            // 重新生成半径及颜色\r\n            s.calculateProperty(newRadius, o.colorType);\r\n            // 移除小球\r\n            let canvas = cc.find(\"Canvas\");\r\n            canvas.removeChild(o.node, true);\r\n            this.gameManager.getComponent(GameManager).ballNum--;\r\n        } else if(self.tag == BoxColliderType.Ball && other.tag == BoxColliderType.Wall) {\r\n            let s = self.node.getComponent(Ball);\r\n            s.velocity = cc.v2(-s.velocity.x, -s.velocity.y);\r\n        } \r\n        // else if(self.tag == BoxColliderType.Player && other.tag == BoxColliderType.Wall) {\r\n            // let s = self.node.getComponent(Player);\r\n            // let f = s.speedLimitFator;\r\n            // s.speedLimitFator = -2;\r\n            // setTimeout(() => {\r\n            //     s.speedLimitFator = f;\r\n            // }, 1000);\r\n        // }\r\n    }\r\n}\r\n"]}